{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\nbrain = Brain()\n\n# Robot configuration code (generated)\nLeftSide_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nLeftSide_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nLeftSide = MotorGroup(LeftSide_motor_a, LeftSide_motor_b)\nRightSide_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nRightSide_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nRightSide = MotorGroup(RightSide_motor_a, RightSide_motor_b)\ncontroller_1 = Controller(PRIMARY)\n\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n\n# Donut Run ‚Äì Auto, 200 RPM, Slow ~180¬∞ Turn + Left-Veer Trim, extended return\nfrom vex import *\n\n# --------- easy tweak knobs ---------\nFORWARD_DISTANCE_MM = 9140       # ~30 ft out\nTURN_DEGREES        = 190      # a few degrees more than 180\nBACK_EXTRA_MM       = 300        # go a bit farther on the way back\nRETURN_DISTANCE_MM  = FORWARD_DISTANCE_MM + BACK_EXTRA_MM\n# ------------------------------------\n\n# ---- Robot geometry ----\nWHEEL_DIAM_MM   = 101.6\nTRACK_WIDTH_MM  = 300.0\n\n# ---- Drivetrain Motors (18:1 = ~200 RPM) ----\nleftA  = Motor(Ports.PORT1,  GearSetting.RATIO_18_1, False)\nleftB  = Motor(Ports.PORT2,  GearSetting.RATIO_18_1, False)\nrightA = Motor(Ports.PORT9,  GearSetting.RATIO_18_1, True)   # reversed for mirrored side\nrightB = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)   # reversed for mirrored side\n\nLeftSide  = MotorGroup(leftA, leftB)\nRightSide = MotorGroup(rightA, rightB)\n\nfor m in (leftA, leftB, rightA, rightB):\n    m.set_max_torque(80, PERCENT)\nLeftSide.set_stopping(COAST)\nRightSide.set_stopping(COAST)\n\nwait(30, MSEC)\n\ndef _slew_toward(cur, tgt, step):\n    if tgt > cur:\n        cur = tgt if cur + step > tgt else cur + step\n    elif tgt < cur:\n        cur = tgt if cur - step < tgt else cur - step\n    return cur\n\ndef _clamp(x, lo, hi):\n    return hi if x > hi else lo if x < lo else x\n\ndef drive_straight(distance_mm: float,\n                   base_speed_pct: float = 45,\n                   kP: float = 0.22,\n                   slew_step: float = 2.0,\n                   min_speed_pct: float = 10,\n                   bias_trim_pct: float = -2.5):  # permanent left-veer fix\n    wheel_circ = WHEEL_DIAM_MM * 3.1415926\n    target_turns = abs(distance_mm) / wheel_circ\n    forward = distance_mm > 0\n\n    LeftSide.set_position(0, TURNS)\n    RightSide.set_position(0, TURNS)\n    cur_left = 0.0\n    cur_right = 0.0\n\n    while True:\n        L = LeftSide.position(TURNS)\n        R = RightSide.position(TURNS)\n        avg_turns = (abs(L) + abs(R)) * 0.5\n        if avg_turns >= target_turns:\n            break\n\n        error = L - R\n        corr = error * (kP * 100.0)\n\n        tgt_left  = base_speed_pct - corr + bias_trim_pct\n        tgt_right = base_speed_pct + corr - bias_trim_pct\n        tgt_left  = _clamp(tgt_left,  -base_speed_pct, base_speed_pct)\n        tgt_right = _clamp(tgt_right, -base_speed_pct, base_speed_pct)\n\n        if forward:\n            tgt_left  = max(tgt_left,  min_speed_pct)\n            tgt_right = max(tgt_right, min_speed_pct)\n        else:\n            tgt_left  = min(tgt_left,  -min_speed_pct)\n            tgt_right = min(tgt_right, -min_speed_pct)\n\n        cur_left  = _slew_toward(cur_left,  tgt_left,  slew_step)\n        cur_right = _slew_toward(cur_right, tgt_right, slew_step)\n\n        if forward:\n            LeftSide.spin(FORWARD,  cur_left,  PERCENT)\n            RightSide.spin(FORWARD, cur_right, PERCENT)\n        else:\n            LeftSide.spin(REVERSE,  abs(cur_left),  PERCENT)\n            RightSide.spin(REVERSE, abs(cur_right), PERCENT)\n\n        wait(20, MSEC)\n\n    for _ in range(12):\n        cur_left  = _slew_toward(cur_left,  0, 4)\n        cur_right = _slew_toward(cur_right, 0, 4)\n        if forward:\n            LeftSide.spin(FORWARD,  cur_left,  PERCENT)\n            RightSide.spin(FORWARD, cur_right, PERCENT)\n        else:\n            LeftSide.spin(REVERSE,  abs(cur_left),  PERCENT)\n            RightSide.spin(REVERSE, abs(cur_right), PERCENT)\n        wait(20, MSEC)\n\n    LeftSide.stop(COAST)\n    RightSide.stop(COAST)\n\ndef turn_in_place_degrees(degrees: float,\n                          base_speed_pct: float = 16,  # extra slow and gentle\n                          kP: float = 0.20,\n                          slew_step: float = 1.0,\n                          min_speed_pct: float = 6):\n    arc_len_mm = 3.1415926 * TRACK_WIDTH_MM * (abs(degrees) / 360.0)\n    wheel_circ = WHEEL_DIAM_MM * 3.1415926\n    target_turns = arc_len_mm / wheel_circ\n\n    LeftSide.set_position(0, TURNS)\n    RightSide.set_position(0, TURNS)\n\n    left_dir  = FORWARD if degrees >= 0 else REVERSE\n    right_dir = REVERSE if degrees >= 0 else FORWARD\n\n    cur_left = 0.0\n    cur_right = 0.0\n\n    while True:\n        L = abs(LeftSide.position(TURNS))\n        R = abs(RightSide.position(TURNS))\n        if (L + R) * 0.5 >= target_turns:\n            break\n\n        error = L - R\n        corr = error * (kP * 100.0)\n\n        tgt_left  = base_speed_pct - corr\n        tgt_right = base_speed_pct + corr\n        tgt_left  = _clamp(max(tgt_left,  min_speed_pct), min_speed_pct, base_speed_pct)\n        tgt_right = _clamp(max(tgt_right, min_speed_pct), min_speed_pct, base_speed_pct)\n\n        cur_left  = _slew_toward(cur_left,  tgt_left,  slew_step)\n        cur_right = _slew_toward(cur_right, tgt_right, slew_step)\n\n        LeftSide.spin(left_dir,  abs(cur_left),  PERCENT)\n        RightSide.spin(right_dir, abs(cur_right), PERCENT)\n        wait(20, MSEC)\n\n    for _ in range(10):\n        cur_left  = _slew_toward(cur_left,  0, 3)\n        cur_right = _slew_toward(cur_right, 0, 3)\n        LeftSide.spin(left_dir,  abs(cur_left),  PERCENT)\n        RightSide.spin(right_dir, abs(cur_right), PERCENT)\n        wait(20, MSEC)\n\n    LeftSide.stop(COAST)\n    RightSide.stop(COAST)\n\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"üç© Auto: Straight ‚Üí Slow ~180¬∞ ‚Üí Back+extra\")\n\n    # forward\n    drive_straight(FORWARD_DISTANCE_MM, base_speed_pct=45, kP=0.22, bias_trim_pct=-2.5)\n\n    # slow ~180¬∞ (slightly more to line up straight)\n    turn_in_place_degrees(TURN_DEGREES, base_speed_pct=16, kP=0.20, slew_step=1.0, min_speed_pct=6)\n\n    # back (FORWARD relative to new heading) ‚Äî changed to POSITIVE distance ‚úÖ\n    drive_straight(RETURN_DISTANCE_MM, base_speed_pct=45, kP=0.22, bias_trim_pct=-2.5)\n\n    brain.screen.clear_screen()\n    brain.screen.print(\"‚úÖ Auto Done\")\n\n# auto-start\nautonomous()\n\nwhile True:\n    wait(100, MSEC)\n","textLanguage":"python","rconfig":[{"port":[1,2],"name":"LeftSide","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[9,10],"name":"RightSide","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}