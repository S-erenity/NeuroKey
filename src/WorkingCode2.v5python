{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nLeftSide_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nLeftSide_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nLeftSide = MotorGroup(LeftSide_motor_a, LeftSide_motor_b)\nRightSide_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nRightSide_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nRightSide = MotorGroup(RightSide_motor_a, RightSide_motor_b)\ncontroller_1 = Controller(PRIMARY)\n\n# Added mechanisms\narmMotor  = Motor(Ports.PORT5,  GearSetting.RATIO_18_1, False)   # arm\nclawMotor = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)   # claw\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# --- Adjustable speed limit (percent of stick input) ---\nDRIVE_SPEED_LIMIT = 50  # try 40-60 for precision, 100 for full speed\n\nmyVariable = 0\n\ndef ondriver_drivercontrol_0():\n    global myVariable\n    while True:\n        # --- Tank drive (slower for better control) ---\n        left_input  = controller_1.axis3.position() * (DRIVE_SPEED_LIMIT / 100)\n        right_input = controller_1.axis2.position() * (DRIVE_SPEED_LIMIT / 100)\n        LeftSide.set_velocity(left_input, PERCENT)\n        RightSide.set_velocity(right_input, PERCENT)\n        LeftSide.spin(FORWARD)\n        RightSide.spin(FORWARD)\n\n        # --- Arm control (L1 up, R1 down) ---\n        if controller_1.buttonL1.pressing():\n            armMotor.spin(FORWARD, 50, PERCENT)\n        elif controller_1.buttonR1.pressing():\n            armMotor.spin(REVERSE, 50, PERCENT)\n        else:\n            armMotor.stop(HOLD)\n\n        # --- Claw control (L2 open, R2 close) ---\n        if controller_1.buttonL2.pressing():\n            clawMotor.spin(FORWARD, 40, PERCENT)   # OPEN\n        elif controller_1.buttonR2.pressing():\n            clawMotor.spin(REVERSE, 40, PERCENT)   # CLOSE\n        else:\n            clawMotor.stop(HOLD)\n\n        wait(5, MSEC)\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    while competition.is_autonomous() and competition.is_enabled():\n        wait(10, MSEC)\n\ndef vexcode_driver_function():\n    driver_control_task_0 = Thread(ondriver_drivercontrol_0)\n    while competition.is_driver_control() and competition.is_enabled():\n        wait(10, MSEC)\n    driver_control_task_0.stop()\n\n# register the competition functions\ncompetition = Competition(vexcode_driver_function, vexcode_auton_function)\n","textLanguage":"python","rconfig":[{"port":[1,2],"name":"LeftSide","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[9,10],"name":"RightSide","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}