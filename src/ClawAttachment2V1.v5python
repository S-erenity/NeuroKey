{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\nbrain = Brain()\nwait(30, MSEC)\n#endregion\n\n# George Huang - Wrote the code\n# Alan Huang - Helped Debugged code\n# Updated by ChatGPT (2025)\n# Task: Drive forward 30 ft, pick up donut, return, and place on 3‚Äù platform.\n\n# Brain and controller setup\nbrain = Brain()\ncontroller = Controller()\n\n# Motor setup\narmMotor = Motor(Ports.PORT1, GearSetting.RATIO18_1, False)\nclawMotor = Motor(Ports.PORT2, GearSetting.RATIO18_1, False)\nleftMotor = Motor(Ports.PORT3, GearSetting.RATIO18_1, False)\nrightMotor = Motor(Ports.PORT4, GearSetting.RATIO18_1, True)  # Reversed for forward sync\n\n# Constants\nARM_PREP_ANGLE = 45\nARM_LIFT_PLATFORM_ANGLE = 75\nCLAW_OPEN_TIME = 0.5\nCLAW_CLOSE_TIME = 0.8\nARM_SPEED = 50\nCLAW_SPEED = 40\nDRIVE_SPEED = 50\n\n# Wheel setup\nWHEEL_DIAMETER_INCH = 4\nWHEEL_CIRCUMFERENCE = 3.1416 * WHEEL_DIAMETER_INCH\nDISTANCE_FEET = 30\nDISTANCE_INCHES = DISTANCE_FEET * 12\nROTATIONS_NEEDED = DISTANCE_INCHES / WHEEL_CIRCUMFERENCE\n\n# Preparation\ndef prepare_claw_and_arm():\n    brain.screen.print(\"Preparing arm and claw...\")\n    brain.screen.new_line()\n    armMotor.stop()\n    clawMotor.stop()\n    armMotor.set_position(0, DEGREES)\n    clawMotor.set_position(0, DEGREES)\n    brain.screen.print(\"Motors reset.\")\n    brain.screen.new_line()\n\n    # Open claw\n    clawMotor.spin(FORWARD, CLAW_SPEED, PERCENT)\n    wait(CLAW_OPEN_TIME, SECONDS)\n    clawMotor.stop(BRAKE)\n    brain.screen.print(\"Claw opened.\")\n    brain.screen.new_line()\n\n    # Raise arm slightly\n    armMotor.spin_to_position(ARM_PREP_ANGLE, DEGREES, ARM_SPEED, PERCENT)\n    brain.screen.print(\"Arm ready.\")\n    brain.screen.new_line()\n\n    armMotor.stop(HOLD)\n    clawMotor.stop(HOLD)\n    brain.screen.print(\"Prep complete.\")\n    brain.screen.new_line()\n\ndef drive_straight(rotations, speed=PERCENT):\n    leftMotor.spin_for(FORWARD, rotations, TURNS, DRIVE_SPEED, PERCENT, False)\n    rightMotor.spin_for(FORWARD, rotations, TURNS, DRIVE_SPEED, PERCENT, True)\n\ndef turn_around():\n    # 180-degree turn (adjust rotation if needed)\n    leftMotor.spin_for(FORWARD, 1.5, TURNS, DRIVE_SPEED, PERCENT, False)\n    rightMotor.spin_for(REVERSE, 1.5, TURNS, DRIVE_SPEED, PERCENT, True)\n\ndef pick_up_donut():\n    brain.screen.print(\"Picking up donut...\")\n    brain.screen.new_line()\n    # Lower arm slightly to grab\n    armMotor.spin_to_position(20, DEGREES, ARM_SPEED, PERCENT)\n    # Close claw to grab donut\n    clawMotor.spin(REVERSE, CLAW_SPEED, PERCENT)\n    wait(CLAW_CLOSE_TIME, SECONDS)\n    clawMotor.stop(HOLD)\n    brain.screen.print(\"Donut grabbed.\")\n    brain.screen.new_line()\n\ndef place_on_platform():\n    brain.screen.print(\"Placing donut...\")\n    brain.screen.new_line()\n    # Lift arm to platform height\n    armMotor.spin_to_position(ARM_LIFT_PLATFORM_ANGLE, DEGREES, ARM_SPEED, PERCENT)\n    wait(0.5, SECONDS)\n    # Open claw to release donut\n    clawMotor.spin(FORWARD, CLAW_SPEED, PERCENT)\n    wait(CLAW_OPEN_TIME, SECONDS)\n    clawMotor.stop(BRAKE)\n    brain.screen.print(\"Donut placed.\")\n    brain.screen.new_line()\n\n# --- Main Routine ---\nprepare_claw_and_arm()\n\n# Drive forward 30 feet\ndrive_straight(ROTATIONS_NEEDED)\n\n# Pick up donut\npick_up_donut()\n\n# Turn 180 degrees\nturn_around()\n\n# Drive back to start\ndrive_straight(ROTATIONS_NEEDED)\n\n# Place donut on platform\nplace_on_platform()\n\n# End\nbrain.screen.print(\"Mission complete!\")\nbrain.screen.new_line()\n\n# Optional: manual control loop if you want to resume manual operation\nwhile True:\n    if controller.buttonL1.pressing():\n        armMotor.spin(FORWARD, ARM_SPEED, PERCENT)\n    elif controller.buttonL2.pressing():\n        armMotor.spin(REVERSE, ARM_SPEED, PERCENT)\n    else:\n        armMotor.stop(HOLD)\n\n    if controller.buttonR1.pressing():\n        clawMotor.spin(FORWARD, CLAW_SPEED, PERCENT)\n    elif controller.buttonR2.pressing():\n        clawMotor.spin(REVERSE, CLAW_SPEED, PERCENT)\n    else:\n        clawMotor.stop(HOLD)\n\n    wait(0.02, SECONDS)\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}