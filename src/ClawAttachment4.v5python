{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain & Controller\nbrain = Brain()\ncontroller_1 = Controller(PRIMARY)\n\n# --- Motors (match your wiring) ---\n# Tank drive (as in your arm file)\nleftMotor  = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nrightMotor = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)  # reversed for forward\n\n# Arm + Claw\narmMotor  = Motor(Ports.PORT2,  GearSetting.RATIO_18_1, False)     # keep your arm on Port 2\nclawMotor = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)     # claw moved to Port 12 per your note\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n\n# ----------------- Driver Control Loop (your original tank logic + arm/claw) -----------------\ndef ondriver_drivercontrol_0():\n    # original: joysticks directly to motors (Axis3=left, Axis2=right)\n    while True:\n        # -------- Tank Drive (unchanged behavior) --------\n        leftMotor.set_velocity(controller_1.axis3.position(), PERCENT)\n        rightMotor.set_velocity(controller_1.axis2.position(), PERCENT)\n        leftMotor.spin(FORWARD)\n        rightMotor.spin(FORWARD)\n\n        # -------- Arm Control --------\n        # L1 = arm up, R1 = arm down, else hold\n        if controller_1.buttonL1.pressing():\n            armMotor.spin(FORWARD, 50, PERCENT)\n        elif controller_1.buttonR1.pressing():\n            armMotor.spin(REVERSE, 50, PERCENT)\n        else:\n            armMotor.stop(HOLD)\n\n        # -------- Claw Control (Port 12) --------\n        # L2 = open, R2 = close, else hold\n        if controller_1.buttonL2.pressing():\n            clawMotor.spin(FORWARD, 40, PERCENT)   # OPEN\n        elif controller_1.buttonR2.pressing():\n            clawMotor.spin(REVERSE, 40, PERCENT)   # CLOSE\n        else:\n            clawMotor.stop(HOLD)\n\n        wait(5, MSEC)\n\n\n# ----------------- Competition Wrappers (as in your original structure) -----------------\ndef vexcode_auton_function():\n    while competition.is_autonomous() and competition.is_enabled():\n        wait(10, MSEC)\n\ndef vexcode_driver_function():\n    driver_control_task_0 = Thread(ondriver_drivercontrol_0)\n    while competition.is_driver_control() and competition.is_enabled():\n        wait(10, MSEC)\n    driver_control_task_0.stop()\n\n# register the competition functions\ncompetition = Competition(vexcode_driver_function, vexcode_auton_function)\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}