{"mode":"Text","textContent":"# Donut Run ‚Äì Encoder-Corrected, Max Speed (600 RPM), Competition Template\nfrom vex import *\n\nbrain = Brain()\ncontroller = Controller(PRIMARY)\nCompetition = Competition()\n\n# ---- Motor Groups (match your screenshots) ----\n# If your robot goes backward when it should go forward, flip 'reversed' on ONE side (usually right).\nleftA  = Motor(Ports.PORT1,  GearSetting.RATIO_6_1, False)\nleftB  = Motor(Ports.PORT2,  GearSetting.RATIO_6_1, False)\nrightA = Motor(Ports.PORT9,  GearSetting.RATIO_6_1, False)\nrightB = Motor(Ports.PORT10, GearSetting.RATIO_6_1, False)\n\nLeftSide  = MotorGroup(leftA, leftB)\nRightSide = MotorGroup(rightA, rightB)\n\n# ---- Helper: straight drive using only encoders (no inertial) ----\ndef drive_straight(distance_mm: float, speed_pct: float = 100, kP: float = 0.30):\n    \"\"\"\n    Drive straight using encoder feedback.\n    distance_mm > 0 -> forward, < 0 -> reverse\n    speed_pct: base speed (0‚Äì100). kP: 0.2‚Äì0.4 typical.\n    \"\"\"\n    wheel_diam_mm = 101.6  # 4 in wheels; change if different\n    wheel_circ = wheel_diam_mm * 3.1415926\n    target_turns = abs(distance_mm) / wheel_circ\n\n    # Reset encoders\n    LeftSide.set_position(0, TURNS)\n    RightSide.set_position(0, TURNS)\n\n    forward = distance_mm > 0\n    while abs(LeftSide.position(TURNS)) < target_turns:\n        # Compare how far each side has gone\n        left_pos  = LeftSide.position(TURNS)\n        right_pos = RightSide.position(TURNS)\n        error = left_pos - right_pos            # +error -> left is ahead\n\n        # Proportional correction\n        correction = error * kP\n        left_speed  = speed_pct - correction\n        right_speed = speed_pct + correction\n\n        # Clamp\n        left_speed  = max(min(left_speed, 100), -100)\n        right_speed = max(min(right_speed, 100), -100)\n\n        # Spin\n        if forward:\n            LeftSide.spin(FORWARD, left_speed, PERCENT)\n            RightSide.spin(FORWARD, right_speed, PERCENT)\n        else:\n            LeftSide.spin(REVERSE, left_speed, PERCENT)\n            RightSide.spin(REVERSE, right_speed, PERCENT)\n\n        wait(10, MSEC)\n\n    LeftSide.stop(BRAKE)\n    RightSide.stop(BRAKE)\n\n# ---- Autonomous routine ----\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"üç© Donut Run\")\n\n    # ~30 ft forward (30 ft ‚âà 9140 mm)\n    drive_straight(9140, speed_pct=100, kP=0.30)\n\n    # 180¬∞ turn: spin-in-place (timed). Tune the time for your bot.\n    LeftSide.spin(FORWARD, 100, PERCENT)\n    RightSide.spin(REVERSE, 100, PERCENT)\n    wait(0.80, SECONDS)   # increase/decrease until it‚Äôs a clean 180¬∞\n    LeftSide.stop(BRAKE)\n    RightSide.stop(BRAKE)\n\n    # Return to start\n    drive_straight(9140, speed_pct=100, kP=0.30)\n\n    LeftSide.stop(BRAKE)\n    RightSide.stop(BRAKE)\n    brain.screen.clear_screen()\n    brain.screen.print(\"‚úÖ Done\")\n\n# ---- Driver (unused here, but required by template) ----\ndef drivercontrol():\n    while True:\n        wait(20, MSEC)\n\n# ---- Hook into competition template ----\nCompetition.autonomous(autonomous)\nCompetition.drivercontrol(drivercontrol)\n\n# Keep program alive\nwhile True:\n    wait(100, MSEC)\n","textLanguage":"python","rconfig":[{"port":[1,2],"name":"LeftSide","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"}},{"port":[9,10],"name":"RightSide","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"false"}},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"}}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}